<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zahlblog (Posts about pip)</title><link>https://zahlman.github.io/</link><description>The default package installer for Python. &lt;a href="https://pip.pypa.io"&gt;Homepage&lt;/a&gt;</description><atom:link href="https://zahlman.github.io/tags-and-series/pip.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022-2025 &lt;a href="mailto:zahlman@proton.me"&gt;Karl Knechtel&lt;/a&gt; </copyright><lastBuildDate>Sat, 01 Mar 2025 01:52:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python packaging: Why we can't have nice things - Part 3: Premature Compilation</title><link>https://zahlman.github.io/posts/2025/02/28/python-packaging-3/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;Pip 25.0 &lt;a href="https://discuss.python.org/t/_/78392"&gt;has been out&lt;/a&gt; for &lt;a href="https://github.com/pypa/pip/releases/tag/25.0"&gt;a bit over a month now&lt;/a&gt;; and we now also have an &lt;a href="https://ichard26.github.io/blog/2025/01/whats-new-in-pip-25.0/"&gt;official blog post&lt;/a&gt; about the release, as well as a 25.0.1 patch for a regression.&lt;/p&gt;
&lt;p&gt;Pip 25.0 has what I consider a very serious security vulnerability. In the Python ecosystem, it's normal and expected that third-party packages provide their own, arbitrary "setup" code for installation (for example, to run C compilers in project-specific ways, when the code uses a C extension). But Pip will run such code &lt;em&gt;in many more situations than you might naively expect&lt;/em&gt;. I think it's obvious that running arbitrary code &lt;em&gt;when you aren't expecting it and prepared for it&lt;/em&gt; is a much bigger problem. The user should have a chance to decide whether to trust the code, first.&lt;/p&gt;
&lt;p&gt;I believe that warnings are more important than baiting people to read the post, so here's the PSA up front:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Never use Pip to download, test, "dry-run" etc. an untrusted source distribution (sdist).&lt;/strong&gt; &lt;a href="https://github.com/pypa/pip/issues/1884"&gt;It will try to build the package&lt;/a&gt;, &lt;strong&gt;potentially running arbitrary code&lt;/strong&gt; (as building an sdist always entails). Instead, use the &lt;a href="https://pypi.org"&gt;PyPI website&lt;/a&gt; directly, or the &lt;a href="https://docs.pypi.org/api/json/"&gt;API&lt;/a&gt; it provides.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Never use &lt;code&gt;sudo&lt;/code&gt; to run Pip&lt;/strong&gt; (nor run it with administrative privileges on Windows). Aside from the potential problems caused by conflicting with the system package manager, Pip &lt;a href="https://github.com/pypa/pip/issues/11034"&gt;&lt;strong&gt;will not drop privileges&lt;/strong&gt;&lt;/a&gt; when it runs as root and attempts to build an sdist - which again, &lt;strong&gt;potentially runs arbitrary code&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you expect wheels to be available for the packages you want to install with Pip, &lt;strong&gt;strongly consider adding &lt;code&gt;--only-binary=:all:&lt;/code&gt; to the Pip command&lt;/strong&gt; to ensure that only wheels are used. If you really need to use sdists, it's wise to inspect them first, which by definition isn't possible with a fully automated installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you release Python packages, &lt;a href="https://pradyunsg.me/blog/2022/12/31/wheels-are-faster-pure-python/"&gt;please try to provide wheels for them&lt;/a&gt;, even if - no, &lt;em&gt;especially&lt;/em&gt; if your package includes only Python code and doesn't require explicitly "compiling" anything. An sdist is &lt;em&gt;much&lt;/em&gt; slower to install than a wheel even in these cases, and making a wheel available allows your users to demand wheels from Pip - raising the overall baseline for trust and safety in the Python ecosystem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Okay, I did clickbait a bit. This security issue &lt;em&gt;isn't&lt;/em&gt; some new discovery. In fact, it has plagued Pip &lt;em&gt;for its entire history&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Please enjoy my detailed analysis below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2025/02/28/python-packaging-3/"&gt;Read more…&lt;/a&gt; (33 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pip</category><category>python</category><category>security</category><category>setuptools</category><guid>https://zahlman.github.io/posts/2025/02/28/python-packaging-3/</guid><pubDate>Fri, 28 Feb 2025 05:00:00 GMT</pubDate></item><item><title>Python Packaging: Why we can't have nice things - Part 2: Stupid Pipx Tricks</title><link>https://zahlman.github.io/posts/2025/01/07/python-packaging-2/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;Pip has a lot of problems (that I'll be discussing in future posts in this series), but the good news is that you don't have to resort to heavyweight third-party tools to improve your experience with Python packaging. &lt;a href="https://pipx.pypa.io/stable/"&gt;Pipx&lt;/a&gt; (now &lt;a href="https://packaging.python.org/en/latest/key_projects/#pipx"&gt;under&lt;/a&gt; the &lt;a href="https://www.pypa.io/en/latest/"&gt;Python Packaging Authority (PyPA)&lt;/a&gt; umbrella) is a focused wrapper around Pip that handles the major pain points without trying to take over your entire workflow.&lt;/p&gt;
&lt;p&gt;In this post I'll talk about Pipx's major use cases, its limitations, and how to get more mileage out of it with a few simple tweaks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2025/01/07/python-packaging-2/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pip</category><category>pipx</category><category>python</category><guid>https://zahlman.github.io/posts/2025/01/07/python-packaging-2/</guid><pubDate>Tue, 07 Jan 2025 05:00:00 GMT</pubDate></item><item><title>Python packaging: Why we can't have nice things - Part 1: The Old Refrain</title><link>https://zahlman.github.io/posts/2024/12/24/python-packaging-1/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a start of a series I've planned about how packaging currently works in Python, what's wrong with it, and how to cope with the problems. But before I get into the meat of it, I want to talk about common complaints that &lt;em&gt;don't&lt;/em&gt; resonate with me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2024/12/24/python-packaging-1/"&gt;Read more…&lt;/a&gt; (21 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pip</category><category>python</category><category>virtual-environments</category><guid>https://zahlman.github.io/posts/2024/12/24/python-packaging-1/</guid><pubDate>Tue, 24 Dec 2024 05:00:00 GMT</pubDate></item></channel></rss>