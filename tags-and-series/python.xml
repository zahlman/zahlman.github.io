<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zahlblog (Posts about python)</title><link>https://zahlman.github.io/</link><description>&lt;a href="https://python.org"&gt;Main Website&lt;/a&gt;</description><atom:link href="https://zahlman.github.io/tags-and-series/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022-2025 &lt;a href="mailto:zahlman@proton.me"&gt;Karl Knechtel&lt;/a&gt; </copyright><lastBuildDate>Sat, 11 Jan 2025 21:41:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A Brief Annotation</title><link>https://zahlman.github.io/posts/2025/01/11/a-brief-annotation/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;p&gt;I've been quite busy working on both the next article in my &lt;a href="https://zahlman.github.io/tags-and-series/series-python-packaging"&gt;packaging series&lt;/a&gt; and on the overall appearance of the blog (I wasn't able to keep that confined to the weekend, apparently).&lt;/p&gt;
&lt;p&gt;So, today, just a quick note, on the occasion of the 4th anniversary of the creation of &lt;a href="https://peps.python.org/pep-0649/"&gt;PEP 649&lt;/a&gt; "Deferred Evaluation Of Annotations Using Descriptors".&lt;/p&gt;
&lt;p&gt;Yes, that's a mouthful, but in short: starting in Python 3.14, if you use annotations, you'll be able to defer the evaluation of the annotation code. (The feature &lt;a href="https://discuss.python.org/t/_/21331/43"&gt;was supposed to be added for 3.13, but didn't make it in&lt;/a&gt;.) That means you don't have to rely on strings for forward references in your type annotations, but you can still make full use of annotations at runtime (you'll have a proper object for the annotation itself, rather than just a string). Thank you to core Python developer Mr. Larry Hastings for putting a tremendous amount of effort into refining this proposal.&lt;/p&gt;
&lt;p&gt;Now, I don't personally use type annotations very much - I don't use a type checker at all; I only write annotations as a form of documentation. But as it happened, &lt;a href="https://zahlman.github.io/tags-and-series/series-python-discourse-ban"&gt;when I was new to the Python Discourse forum&lt;/a&gt;, I came across Mr. Hastings' post, puzzling over the best way to name what will soon become the &lt;code&gt;__annotate__&lt;/code&gt; attribute of annotated objects.&lt;/p&gt;
&lt;p&gt;The name &lt;code&gt;__annotate__&lt;/code&gt; &lt;a href="https://discuss.python.org/t/_/25672/4"&gt;was my suggestion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was not credited in the PEP, and I &lt;a href="https://discuss.python.org/t/_/25672/61"&gt;was ignored&lt;/a&gt; when I tried to point this out. So it falls to me to draw attention to my contribution.&lt;/p&gt;
&lt;p&gt;This is all very niche stuff, of course - but I'm happy to have been able to leave this mark on the Python language itself, as opposed to just making useful things with it.&lt;/p&gt;</description><category>python</category><guid>https://zahlman.github.io/posts/2025/01/11/a-brief-annotation/</guid><pubDate>Sat, 11 Jan 2025 05:00:00 GMT</pubDate></item><item><title>Python Packaging: Why we can't have nice things - Part 2: Stupid Pipx Tricks</title><link>https://zahlman.github.io/posts/2025/01/07/python-packaging-2/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;Pip has a lot of problems (that I'll be discussing in future posts in this series), but the good news is that you don't have to resort to heavyweight third-party tools to improve your experience with Python packaging. &lt;a href="https://pipx.pypa.io/stable/"&gt;Pipx&lt;/a&gt; (now &lt;a href="https://packaging.python.org/en/latest/key_projects/#pipx"&gt;under&lt;/a&gt; the &lt;a href="https://www.pypa.io/en/latest/"&gt;Python Packaging Authority (PyPA)&lt;/a&gt; umbrella) is a focused wrapper around Pip that handles the major pain points without trying to take over your entire workflow.&lt;/p&gt;
&lt;p&gt;In this post I'll talk about Pipx's major use cases, its limitations, and how to get more mileage out of it with a few simple tweaks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2025/01/07/python-packaging-2/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pip</category><category>pipx</category><category>python</category><guid>https://zahlman.github.io/posts/2025/01/07/python-packaging-2/</guid><pubDate>Tue, 07 Jan 2025 05:00:00 GMT</pubDate></item><item><title>New year, new blog</title><link>https://zahlman.github.io/posts/2025/01/01/new-year-new-blog/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;You're not imagining things - the blog has a whole new look, in large part as a result of switching to the &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; site generator.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2025/01/01/new-year-new-blog/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>jekyll</category><category>meta</category><category>nikola</category><category>python</category><guid>https://zahlman.github.io/posts/2025/01/01/new-year-new-blog/</guid><pubDate>Wed, 01 Jan 2025 05:00:00 GMT</pubDate></item><item><title>`fixup! added list` - The rest of the TODOwl</title><link>https://zahlman.github.io/posts/2024/12/31/todo-list-2/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;Happy new year to all.&lt;/p&gt;
&lt;p&gt;Today's post is about a folder on my desktop named &lt;code&gt;dev&lt;/code&gt;. It's where I've kept (for many years, well into my Windows-using days, even into the era when I used SVN rather than Git) all my working copies for my own projects (and forks of others'), mostly Python code of course. (I'm not sure how I organized things at the time, but there are projects in there dating back to 2006.)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2024/12/31/todo-list-2/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>meta</category><category>personal</category><category>python</category><guid>https://zahlman.github.io/posts/2024/12/31/todo-list-2/</guid><pubDate>Tue, 31 Dec 2024 05:00:00 GMT</pubDate></item><item><title>Python packaging: Why we can't have nice things - Part 1: The Old Refrain</title><link>https://zahlman.github.io/posts/2024/12/24/python-packaging-1/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a start of a series I've planned about how packaging currently works in Python, what's wrong with it, and how to cope with the problems. But before I get into the meat of it, I want to talk about common complaints that &lt;em&gt;don't&lt;/em&gt; resonate with me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2024/12/24/python-packaging-1/"&gt;Read more…&lt;/a&gt; (21 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pip</category><category>python</category><category>virtual-environments</category><guid>https://zahlman.github.io/posts/2024/12/24/python-packaging-1/</guid><pubDate>Tue, 24 Dec 2024 05:00:00 GMT</pubDate></item><item><title>Timing</title><link>https://zahlman.github.io/posts/2023/04/06/timing/</link><dc:creator>Karl Knechtel</dc:creator><description>&lt;div&gt;&lt;p&gt;Two hundred and forty-one months ago, on March 5, 2023, a then-not-as-well-known man by the name of Guido van Rossum made the &lt;a href="https://github.com/python/cpython/commit/b3f09d4331e7d23eeb8166dda0504b56ec4e7edc"&gt;first commit&lt;/a&gt; of the &lt;code&gt;timeit&lt;/code&gt; module in Python's standard library.&lt;/p&gt;
&lt;p&gt;I had originally planned to write about this for the module's 19th anniversary - as my second post on this blog - before I got distracted from the project. (Long story short, I never actually abandoned the idea - it's just hard to get back into things sometimes.) I've now missed both that anniversary and the 20th. One might say my own sense of timing is not so great - but so it goes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zahlman.github.io/posts/2023/04/06/timing/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>python-standard-library</category><guid>https://zahlman.github.io/posts/2023/04/06/timing/</guid><pubDate>Thu, 06 Apr 2023 04:00:00 GMT</pubDate></item></channel></rss>